name: "Docker Release"

on:
  workflow_call:
    inputs:
      image:
        type: string
        required: true
      dockerfile:
        type: string
        default: "./Dockerfile"
        required: false
      latest:
        type: string
        default: 'false'
        required: false
      force-latest:
        type: boolean
        default: false
        required: false
      latest-on-branch:
        type: string
        default: ""
        required: false
      tag-sha:
        type: boolean
        default: false
        required: false
      tag-date:
        type: string
        default: ""
        required: false
      build-args:
        type: string
        default: ""
        required: false
      manual-tag:
        type: string
        default: ""
        required: false
      mage-targets:
        type: string
        default: ""
        required: false
      make-targets:
        type: string
        default: ""
        required: false
      semver-tag:
        type: string
        default: "true"
        description: "Add semver tag matching commit ref"
        required: false
      semver-ref:
        type: string
        default: ""
        description: "Semver tag to use for manual matching and generating"
        required: false
      platforms:
        required: false
        default: "linux/amd64"
        description: "Comma separated list of platforms for docker buildx (eg. linux/amd64,linux/arm64)"
        type: string
      ref:
        required: false
        description: >
          The branch, tag or SHA to checkout. When checking out the repository that
          triggered a workflow, this defaults to the reference or SHA for that
          event.  Otherwise, uses the default branch.
        type: string
      fetch-depth:
        description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'
        default: '0'
        type: string
    secrets:
      DOCKER_USERNAME:
        required: false
      DOCKER_PASSWORD:
        required: false
      DOCKER_GITHUB_TOKEN:
        required: false

jobs:
  docker:
    name: Docker
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref }}
        fetch-depth: ${{ inputs.fetch-depth }}

    - name: Platforms comma to spaces
      id: platforms
      uses: actions/github-script@v7
      env:
        INPUT_PLATFORMS: "${{ inputs.platforms }}"
      with:
        script: |
          const { INPUT_PLATFORMS } = process.env
          core.setOutput('spaces', INPUT_PLATFORMS.replace(',', ' '))
          core.setOutput('commas', INPUT_PLATFORMS.replace(' ', ','))
          
    - name: Set up Go
      if: ${{ hashFiles('go.mod') != '' }}
      uses: actions/setup-go@v5
      with:
        go-version: ^1
        cache: false
      id: go

    - name: Set up go env
      if: ${{ hashFiles('go.mod') != '' }}
      run: export PATH=${PATH}:`go env GOPATH`/bin

    - name: Set up QEMU
      if: ${{ inputs.platforms != 'linux/amd64' }}
      uses: docker/setup-qemu-action@v3
      with:
        platforms: ${{ inputs.platforms }}

    - name: Set up Docker Buildx
      if: ${{ inputs.platforms != 'linux/amd64' }}
      uses: docker/setup-buildx-action@v3
      with:
        platforms: ${{ inputs.platforms }}

    - name: Run Make Targets
      if: ${{ hashFiles('Makefile') != '' && inputs.make-targets != '' }}
      run: make ${{ inputs.make-targets }}
      env:
        GO_MATRIX: ${{ steps.platforms.outputs.spaces }}

    - name: Run Mage Targets
      if: ${{ hashFiles('magefiles/*') != '' && inputs.mage-targets != '' }}
      uses: magefile/mage-action@v3
      env:
        PLATFORMS: ${{ steps.platforms.outputs.commas }}
      with:
        version: latest
        args: ${{ inputs.mage-targets }}

    - name: Create a date tag
      if: ${{ inputs.tag-date != '' }}
      id: date
      env:
        INPUT_TAGDATE: "${{ inputs.tag-date }}"
      run: |
        export TZ='Australia/Queensland'
        echo "tag=$(date +"${INPUT_TAGDATE}")" | tee "${GITHUB_OUTPUT}"

    - name: Manual Tag Config
      id: manualmeta
      uses: actions/github-script@v7
      env:
        INPUT_FORCE_LATEST: "${{ inputs.force-latest }}"
        INPUT_SEMVER_TAG: "${{ inputs.semver-tag }}"
        INPUT_SEMVER_REF: "${{ inputs.semver-ref }}"
        INPUT_MANUAL_TAG: "${{ inputs.manual-tag }}"
        INPUT_LATEST_ON_BRANCH: "${{ inputs.latest-on-branch }}"
        OUTPUT_DATETAG: "${{ steps.date.outputs.tag }}"
      with:
        script: |
          const { INPUT_FORCE_LATEST, INPUT_SEMVER_TAG, INPUT_SEMVER_REF, INPUT_MANUAL_TAG, INPUT_LATEST_ON_BRANCH, OUTPUT_DATETAG } = process.env

          const stringToBoolean = (stringValue) => {
            switch(stringValue?.toLowerCase()?.trim()){
              case "true": 
              case "yes": 
              case "1": 
                return true;

              case "false": 
              case "no": 
              case "0": 
              case null: 
              case undefined:
                return false;

              default: 
                return stringValue;
            }
          }

          output = []

          if (stringToBoolean(INPUT_SEMVER_TAG) === true) {
            output.push(`type=semver,pattern={{version}}`)
          } else if (stringToBoolean(INPUT_SEMVER_TAG) !== false) {
            const svt = INPUT_SEMVER_TAG.split(',')
            svt.forEach((item) => {
              output.push(`type=semver,pattern=${item}`)
            })

            if (INPUT_SEMVER_REF != "") {
              svt.forEach((item) => {
                output.push(`type=semver,pattern=${item},value=${INPUT_SEMVER_REF}`)
              })
            }
          }

          if (INPUT_FORCE_LATEST == "true") {
            output.push(`type=raw,value=latest,enable=true`)
          }

          if (INPUT_MANUAL_TAG != "") {
            output.push(`type=raw,value=${INPUT_MANUAL_TAG},enable=true`)
          }

          if (INPUT_LATEST_ON_BRANCH == "{{is_default_branch}}") {
            output.push(`type=raw,value=latest,enable={{is_default_branch}}`)
          } else if (INPUT_LATEST_ON_BRANCH == "refs/heads/${context.ref}") {
            output.push(`type=raw,value=latest,enable=true`)
          }

          if (OUTPUT_DATETAG != "") {
            output.push(`type=raw,value=${OUTPUT_DATETAG},enable=true`)
          }

          core.setOutput('config-tags', output.join("\n"))

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        context: workflow
        images: |
          ${{ inputs.image }}
        flavor: |
          latest=${{ inputs.latest }}
        tags: |
          type=sha,enable=${{ inputs.tag-sha }}
          type=ref,event=pr
          ${{ steps.manualmeta.outputs.config-tags }}

    - name: Docker Login (Docker Hub)
      uses: docker/login-action@v3
      env:
        TMP_DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        TMP_DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      if: ${{ (env.TMP_DOCKER_USERNAME != '') && (env.TMP_DOCKER_PASSWORD != '') }}
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Docker Login (GitHub Container Registry)
      uses: docker/login-action@v3
      env:
        TMP_DOCKER_PASSWORD: ${{ secrets.DOCKER_GITHUB_TOKEN }}
      if: ${{ env.TMP_DOCKER_PASSWORD != '' }}
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.DOCKER_GITHUB_TOKEN }}

    - name: Build and Push Docker image
      id: docker-push
      if: ${{ steps.meta.outputs.tags != '' }}
      uses: docker/build-push-action@v6
      with:
        context: ./
        file: ${{ inputs.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: ${{ inputs.build-args }}
        platforms: ${{ steps.platforms.outputs.commas }}
        secrets: |
          github.token=${{ secrets.GITHUB_TOKEN }}

    - name: Adding Docker Image Markdown Summary
      if: ${{ steps.meta.outputs.tags != '' }}
      run: |
        echo "### Docker Image Deployed to Registry ðŸš€" >> "${GITHUB_STEP_SUMMARY}"
        echo "" >> "${GITHUB_STEP_SUMMARY}"
        echo "${{ steps.meta.outputs.tags }}" >> "${GITHUB_STEP_SUMMARY}"
